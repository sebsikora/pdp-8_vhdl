# do shift_register_8_sp_run_msim_rtl_vhdl.do 
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# vlib rtl_work
# vmap work rtl_work
# Copying /home/sebsikora/altera/13.0sp1/modelsim_ase/linuxaloem/../modelsim.ini to modelsim.ini
# Modifying modelsim.ini
# ** Warning: Copied /home/sebsikora/altera/13.0sp1/modelsim_ase/linuxaloem/../modelsim.ini to modelsim.ini.
#          Updated modelsim.ini.
# 
# vcom -93 -work work {/home/sebsikora/altera/projects/pdp-8/ms_jk_ff/ms_jk_ff.vhd}
# Model Technology ModelSim ALTERA vcom 10.1d Compiler 2012.11 Nov  2 2012
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity ms_jk_ff
# -- Compiling architecture gates of ms_jk_ff
# vcom -93 -work work {/home/sebsikora/altera/projects/pdp-8/ms_jk_ff/basic_gates.vhd}
# Model Technology ModelSim ALTERA vcom 10.1d Compiler 2012.11 Nov  2 2012
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity NOT_gate
# -- Compiling architecture rtl of NOT_gate
# -- Compiling entity NAND_3_gate
# -- Compiling architecture rtl of NAND_3_gate
# -- Compiling entity NAND_gate
# -- Compiling architecture rtl of NAND_gate
# -- Compiling entity AND_gate
# -- Compiling architecture rtl of AND_gate
# -- Compiling entity AND_3_gate
# -- Compiling architecture rtl of AND_3_gate
# -- Compiling entity OR_5_gate
# -- Compiling architecture rtl of OR_5_gate
# -- Compiling entity OR_4_gate
# -- Compiling architecture rtl of OR_4_gate
# -- Compiling entity NOR_4_gate
# -- Compiling architecture rtl of NOR_4_gate
# -- Compiling entity OR_3_gate
# -- Compiling architecture rtl of OR_3_gate
# -- Compiling entity OR_gate
# -- Compiling architecture rtl of OR_gate
# -- Compiling entity XOR_gate
# -- Compiling architecture rtl of XOR_gate
# vcom -93 -work work {/home/sebsikora/altera/projects/pdp-8/shift_register_sp/shift_register_8_sp.vhd}
# Model Technology ModelSim ALTERA vcom 10.1d Compiler 2012.11 Nov  2 2012
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity shift_register_8_sp
# -- Compiling architecture rtl of shift_register_8_sp
# 
vsim -voptargs=+acc work.shift_register_8_sp
# vsim -voptargs=+acc work.shift_register_8_sp 
# Loading std.standard
# Loading std.textio(body)
# Loading ieee.std_logic_1164(body)
# Loading work.shift_register_8_sp(rtl)
# Loading work.ms_jk_ff(gates)
# Loading work.nand_3_gate(rtl)
# Loading work.nand_gate(rtl)
wave create -driver freeze -pattern constant -value 0 -starttime 0ns -endtime 10000ns sim:/shift_register_8_sp/not_reset
wave create -driver freeze -pattern constant -value 0 -starttime 0ns -endtime 10000ns sim:/shift_register_8_sp/clk
wave create -driver freeze -pattern constant -value 0 -starttime 0ns -endtime 10000ns sim:/shift_register_8_sp/s_in
add wave  \
sim:/shift_register_8_sp/p_out \
sim:/shift_register_8_sp/s_out
wave modify -driver freeze -pattern constant -value 1 -starttime 200ns -endtime 10000ns Edit:/shift_register_8_sp/not_reset
wave modify -driver freeze -pattern clock -initialvalue 1 -period 200ns -dutycycle 50 -starttime 200ns -endtime 10000ns Edit:/shift_register_8_sp/clk
wave modify -driver freeze -pattern repeater -initialvalue 1 -period 200ns -sequence { 1 0 1 0 1 0 1 0  } -repeat never -starttime 200ns -endtime 10000ns Edit:/shift_register_8_sp/s_in
wave modify -driver freeze -pattern repeater -initialvalue 1 -period 200ns -sequence { 1 0 1 0 1 0 1 0  } -repeat forever -starttime 200ns -endtime 10000ns Edit:/shift_register_8_sp/s_in
run
run
run
run
run
run
run
run
run
run
run
run
run
run
run
run
run
run
run
run -all
restart
write format wave -window .main_pane.wave.interior.cs.body.pw.wf /home/sebsikora/altera/projects/pdp-8/shift_register_sp/simulation/modelsim/shift_register_8_sp_test_wave.do
wave editwrite -file /home/sebsikora/altera/projects/pdp-8/shift_register_sp/simulation/modelsim/shift_register_8_sp_test_wave.do -append
